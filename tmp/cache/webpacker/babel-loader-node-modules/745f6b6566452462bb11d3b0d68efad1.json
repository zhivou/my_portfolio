{"ast":null,"code":"import { BindingObserver } from \"./binding_observer\";\n\nvar Context =\n/** @class */\nfunction () {\n  function Context(module, scope) {\n    this.module = module;\n    this.scope = scope;\n    this.controller = new module.controllerConstructor(this);\n    this.bindingObserver = new BindingObserver(this, this.dispatcher);\n\n    try {\n      this.controller.initialize();\n    } catch (error) {\n      this.handleError(error, \"initializing controller\");\n    }\n  }\n\n  Context.prototype.connect = function () {\n    this.bindingObserver.start();\n\n    try {\n      this.controller.connect();\n    } catch (error) {\n      this.handleError(error, \"connecting controller\");\n    }\n  };\n\n  Context.prototype.disconnect = function () {\n    try {\n      this.controller.disconnect();\n    } catch (error) {\n      this.handleError(error, \"disconnecting controller\");\n    }\n\n    this.bindingObserver.stop();\n  };\n\n  Object.defineProperty(Context.prototype, \"application\", {\n    get: function get() {\n      return this.module.application;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Context.prototype, \"identifier\", {\n    get: function get() {\n      return this.module.identifier;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Context.prototype, \"schema\", {\n    get: function get() {\n      return this.application.schema;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Context.prototype, \"dispatcher\", {\n    get: function get() {\n      return this.application.dispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Context.prototype, \"element\", {\n    get: function get() {\n      return this.scope.element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Context.prototype, \"parentElement\", {\n    get: function get() {\n      return this.element.parentElement;\n    },\n    enumerable: true,\n    configurable: true\n  }); // Error handling\n\n  Context.prototype.handleError = function (error, message, detail) {\n    if (detail === void 0) {\n      detail = {};\n    }\n\n    var _a = this,\n        identifier = _a.identifier,\n        controller = _a.controller,\n        element = _a.element;\n\n    detail = Object.assign({\n      identifier: identifier,\n      controller: controller,\n      element: element\n    }, detail);\n    this.application.handleError(error, \"Error \" + message, detail);\n  };\n\n  return Context;\n}();\n\nexport { Context };","map":null,"metadata":{},"sourceType":"module"}