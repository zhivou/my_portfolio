{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cssLabels = cssLabels;\nexports.default = parse;\n\nvar _flatten = require('./flatten');\n\nvar _flatten2 = _interopRequireDefault(_flatten);\n\nvar _hash = require('./hash');\n\nvar _hash2 = _interopRequireDefault(_hash);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**** labels ****/\n// toggle for debug labels.\n// *shouldn't* have to mess with this manually\n// import clean from './clean';\n\n\nvar hasLabels = process.env.NODE_ENV !== 'production';\n\nfunction cssLabels(bool) {\n  hasLabels = !!bool;\n}\n\nvar prefixedPseudoSelectors = {\n  '::placeholder': ['::-webkit-input-placeholder', '::-moz-placeholder', '::-ms-input-placeholder'],\n  ':fullscreen': [':-webkit-full-screen', ':-moz-full-screen', ':-ms-fullscreen']\n};\n\nfunction isSelector(key) {\n  var possibles = [':', '.', '[', '>', ' '],\n      found = false,\n      ch = key.charAt(0);\n\n  for (var i = 0; i < possibles.length; i++) {\n    if (ch === possibles[i]) {\n      found = true;\n      break;\n    }\n  }\n\n  return found || key.indexOf('&') >= 0;\n} // from https://github.com/j2css/j2c/blob/5d381c2d721d04b54fabe6a165d587247c3087cb/src/helpers.js#L28-L61\n// \"Tokenizes\" the selectors into parts relevant for the next function.\n// Strings and comments are matched, but ignored afterwards.\n// This is not a full tokenizers. It only recognizes comas, parentheses,\n// strings and comments.\n// regexp generated by scripts/regexps.js then trimmed by hand\n\n\nvar selectorTokenizer = /[(),]|\"(?:\\\\.|[^\"\\n])*\"|'(?:\\\\.|[^'\\n])*'|\\/\\*[\\s\\S]*?\\*\\//g;\n/**\n * This will split a coma-separated selector list into individual selectors,\n * ignoring comas in strings, comments and in :pseudo-selectors(parameter, lists).\n *\n * @param {string} selector\n * @return {string[]}\n */\n\nfunction splitSelector(selector) {\n  if (selector.indexOf(',') === -1) {\n    return [selector];\n  }\n\n  var indices = [],\n      res = [],\n      inParen = 0,\n      o;\n  /*eslint-disable no-cond-assign*/\n\n  while (o = selectorTokenizer.exec(selector)) {\n    /*eslint-enable no-cond-assign*/\n    switch (o[0]) {\n      case '(':\n        inParen++;\n        break;\n\n      case ')':\n        inParen--;\n        break;\n\n      case ',':\n        if (inParen) break;\n        indices.push(o.index);\n    }\n  }\n\n  for (o = indices.length; o--;) {\n    res.unshift(selector.slice(indices[o] + 1));\n    selector = selector.slice(0, indices[o]);\n  }\n\n  res.unshift(selector);\n  return res;\n}\n\nfunction joinSelectors(a, b) {\n  var as = splitSelector(a).map(function (a) {\n    return !(a.indexOf('&') >= 0) ? '&' + a : a;\n  });\n  var bs = splitSelector(b).map(function (b) {\n    return !(b.indexOf('&') >= 0) ? '&' + b : b;\n  });\n  return bs.reduce(function (arr, b) {\n    return arr.concat(as.map(function (a) {\n      return b.replace(/\\&/g, a);\n    }));\n  }, []).join(',');\n}\n\nfunction joinMediaQueries(a, b) {\n  return a ? '@media ' + a.substring(6) + ' and ' + b.substring(6) : b;\n}\n\nfunction isMediaQuery(key) {\n  return key.indexOf('@media') === 0;\n}\n\nfunction isSupports(key) {\n  return key.indexOf('@supports') === 0;\n}\n\nfunction joinSupports(a, b) {\n  return a ? '@supports ' + a.substring(9) + ' and ' + b.substring(9) : b;\n} // mutable! modifies dest.\n\n\nfunction construct(dest, _ref) {\n  var _ref$selector = _ref.selector,\n      selector = _ref$selector === undefined ? '' : _ref$selector,\n      _ref$mq = _ref.mq,\n      mq = _ref$mq === undefined ? '' : _ref$mq,\n      _ref$supp = _ref.supp,\n      supp = _ref$supp === undefined ? '' : _ref$supp,\n      _ref$inputs = _ref.inputs,\n      inputs = _ref$inputs === undefined ? {} : _ref$inputs;\n  var inputArray = !Array.isArray(inputs) ? [inputs] : (0, _flatten2.default)(inputs);\n  inputArray.filter(function (x) {\n    return !!x;\n  }).forEach(function (input) {\n    var src = input;\n    Object.keys(src || {}).forEach(function (key) {\n      if (isSelector(key)) {\n        // todo - regex test the string to look for prefixedpseudos\n        if (prefixedPseudoSelectors[key]) {\n          prefixedPseudoSelectors[key].forEach(function (p) {\n            return construct(dest, {\n              selector: joinSelectors(selector, p),\n              mq: mq,\n              supp: supp,\n              inputs: src[key]\n            });\n          });\n        }\n\n        construct(dest, {\n          selector: joinSelectors(selector, key),\n          mq: mq,\n          supp: supp,\n          inputs: src[key]\n        });\n      } else if (isMediaQuery(key)) {\n        construct(dest, {\n          selector: selector,\n          mq: joinMediaQueries(mq, key),\n          supp: supp,\n          inputs: src[key]\n        });\n      } else if (isSupports(key)) {\n        construct(dest, {\n          selector: selector,\n          mq: mq,\n          supp: joinSupports(supp, key),\n          inputs: src[key]\n        });\n      } else {\n        var _dest = dest;\n\n        if (supp) {\n          _dest[supp] = _dest[supp] || {};\n          _dest = _dest[supp];\n        }\n\n        if (mq) {\n          _dest[mq] = _dest[mq] || {};\n          _dest = _dest[mq];\n        }\n\n        if (selector) {\n          _dest[selector] = _dest[selector] || {};\n          _dest = _dest[selector];\n        }\n\n        if (key === 'label') {\n          if (hasLabels) {\n            // concat at root of object\n            dest.label = dest.label.concat(src.label);\n          }\n        } else {\n          _dest[key] = src[key];\n        }\n      }\n    });\n  });\n  return dest;\n}\n\nfunction groupByType(style) {\n  // we can be sure it's not infinitely nested here\n  var plain = void 0,\n      selects = void 0,\n      medias = void 0,\n      supports = void 0;\n  Object.keys(style).forEach(function (key) {\n    if (key.indexOf('&') >= 0) {\n      selects = selects || {};\n      selects[key] = style[key];\n    } else if (key.indexOf('@media') === 0) {\n      medias = medias || {};\n      medias[key] = groupByType(style[key]);\n    } else if (key.indexOf('@supports') === 0) {\n      supports = supports || {};\n      supports[key] = groupByType(style[key]);\n    } else if (key === 'label') {\n      if (style.label.length > 0) {\n        plain = plain || {};\n        plain.label = hasLabels ? style.label.join('.') : '';\n      }\n    } else {\n      plain = plain || {};\n      plain[key] = style[key];\n    }\n  });\n  return {\n    plain: plain,\n    selects: selects,\n    medias: medias,\n    supports: supports\n  };\n}\n\nfunction parse(css) {\n  var parsed = groupByType(construct({\n    label: []\n  }, {\n    inputs: css\n  }));\n  var className = 'css-' + (0, _hash2.default)(parsed);\n  return {\n    className: className,\n    parsed: parsed\n  };\n}","map":null,"metadata":{},"sourceType":"module"}