{"ast":null,"code":"/** @hidden */\nexport function defineTargetProperties(constructor) {\n  var prototype = constructor.prototype;\n  var targetNames = getTargetNamesForConstructor(constructor);\n  targetNames.forEach(function (name) {\n    var _a;\n\n    return defineLinkedProperties(prototype, (_a = {}, _a[name + \"Target\"] = {\n      get: function get() {\n        var target = this.targets.find(name);\n\n        if (target) {\n          return target;\n        } else {\n          throw new Error(\"Missing target element \\\"\" + this.identifier + \".\" + name + \"\\\"\");\n        }\n      }\n    }, _a[name + \"Targets\"] = {\n      get: function get() {\n        return this.targets.findAll(name);\n      }\n    }, _a[\"has\" + capitalize(name) + \"Target\"] = {\n      get: function get() {\n        return this.targets.has(name);\n      }\n    }, _a));\n  });\n}\n\nfunction getTargetNamesForConstructor(constructor) {\n  var ancestors = getAncestorsForConstructor(constructor);\n  return Array.from(ancestors.reduce(function (targetNames, constructor) {\n    getOwnTargetNamesForConstructor(constructor).forEach(function (name) {\n      return targetNames.add(name);\n    });\n    return targetNames;\n  }, new Set()));\n}\n\nfunction getAncestorsForConstructor(constructor) {\n  var ancestors = [];\n\n  while (constructor) {\n    ancestors.push(constructor);\n    constructor = Object.getPrototypeOf(constructor);\n  }\n\n  return ancestors;\n}\n\nfunction getOwnTargetNamesForConstructor(constructor) {\n  var definition = constructor[\"targets\"];\n  return Array.isArray(definition) ? definition : [];\n}\n\nfunction defineLinkedProperties(object, properties) {\n  Object.keys(properties).forEach(function (name) {\n    if (!(name in object)) {\n      var descriptor = properties[name];\n      Object.defineProperty(object, name, descriptor);\n    }\n  });\n}\n\nfunction capitalize(name) {\n  return name.charAt(0).toUpperCase() + name.slice(1);\n}","map":null,"metadata":{},"sourceType":"module"}