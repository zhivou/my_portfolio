{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nimport React, { cloneElement, Component, Children } from 'react';\nimport { findDOMNode, createPortal } from 'react-dom';\nimport glam from 'glam';\nimport rafScheduler from 'raf-schd';\nimport { ViewPager, Frame, Track, View as View$1 } from 'react-view-pager';\nimport ParseHtml from 'html-react-parser';\nimport { FocusOn } from 'react-focus-on';\nimport Fullscreen from 'react-full-screen';\nimport focusStore from 'a11y-focus-store';\nimport { Transition, TransitionGroup } from 'react-transition-group';\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar defineProperty = function defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(superClass));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (_typeof(call) === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar Base = function Base(_ref) {\n  var css = _ref.css,\n      innerRef = _ref.innerRef,\n      Tag = _ref.tag,\n      props = objectWithoutProperties(_ref, ['css', 'innerRef', 'tag']);\n  return glam(Tag, _extends({\n    ref: innerRef,\n    css: _extends({\n      boxSizing: 'border-box'\n    }, css)\n  }, props));\n};\n\nvar Button = function Button(props) {\n  return glam(Base, _extends({\n    tag: 'button'\n  }, props));\n};\n\nvar Div = function Div(props) {\n  return glam(Base, _extends({\n    tag: 'div'\n  }, props));\n};\n\nvar Img = function Img(props) {\n  return glam(Base, _extends({\n    tag: 'img'\n  }, props));\n};\n\nvar Nav = function Nav(props) {\n  return glam(Base, _extends({\n    tag: 'nav'\n  }, props));\n};\n\nvar Span = function Span(props) {\n  return glam(Base, _extends({\n    tag: 'span'\n  }, props));\n}; // ==============================\n// Class Name Prefixer\n// ==============================\n\n\nvar CLASS_PREFIX = 'react-images';\n/**\r\n String representation of component state for styling with class names.\r\n\r\n Expects an array of strings OR a string/object pair:\r\n - className(['comp', 'comp-arg', 'comp-arg-2'])\r\n   @returns 'react-images__comp react-images__comp-arg react-images__comp-arg-2'\r\n - className('comp', { some: true, state: false })\r\n   @returns 'react-images__comp react-images__comp--some'\r\n*/\n\nfunction className(name, state) {\n  var arr = Array.isArray(name) ? name : [name]; // loop through state object, remove falsey values and combine with name\n\n  if (state && typeof name === 'string') {\n    for (var _key in state) {\n      if (state.hasOwnProperty(_key) && state[_key]) {\n        arr.push(name + '--' + _key);\n      }\n    }\n  } // prefix everything and return a string\n\n\n  return arr.map(function (cn) {\n    return CLASS_PREFIX + '__' + cn;\n  }).join(' ');\n} // ==============================\n// Touch Capability Detector\n// ==============================\n\n\nfunction isTouch() {\n  try {\n    document.createEvent('TouchEvent');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar containerCSS = function containerCSS(_ref) {\n  var isFullscreen = _ref.isFullscreen;\n  return {\n    backgroundColor: isFullscreen ? 'black' : null,\n    display: 'flex ',\n    flexDirection: 'column',\n    height: '100%'\n  };\n};\n\nvar Container = function Container(props) {\n  var children = props.children,\n      getStyles = props.getStyles,\n      isFullscreen = props.isFullscreen,\n      isModal = props.isModal,\n      innerProps = props.innerProps;\n  return glam(Div, _extends({\n    css: getStyles('container', props),\n    className: className('container', {\n      isFullscreen: isFullscreen,\n      isModal: isModal\n    })\n  }, innerProps), children);\n};\n\nvar smallDevice = '@media (max-width: 769px)';\n/**\r\n * Used to get the HTML class to select specific components.\r\n * We call `className()` in utils with each of these to get the full className,\r\n * with prefixes.\r\n */\n\nvar componentBaseClassNames = {\n  Header: 'header',\n  Footer: 'footer',\n  View: 'view',\n  Track: 'track',\n  Positioner: 'positioner'\n};\n\nvar footerCSS = function footerCSS(_ref) {\n  var isModal = _ref.isModal,\n      interactionIsIdle = _ref.interactionIsIdle;\n  return defineProperty({\n    alignItems: 'top',\n    bottom: isModal ? 0 : null,\n    color: isModal ? 'rgba(255, 255, 255, 0.9)' : '#666',\n    display: 'flex ',\n    flex: '0 0 auto',\n    fontSize: 13,\n    justifyContent: 'space-between',\n    left: isModal ? 0 : null,\n    opacity: interactionIsIdle && isModal ? 0 : 1,\n    padding: isModal ? '30px 20px 20px' : '10px 0',\n    position: isModal ? 'absolute' : null,\n    right: isModal ? 0 : null,\n    transform: isModal ? 'translateY(' + (interactionIsIdle ? 10 : 0) + 'px)' : null,\n    transition: 'opacity 300ms, transform 300ms',\n    zIndex: isModal ? 1 : null,\n    '& *:focus': {\n      outline: '1.5px solid orange'\n    }\n  }, smallDevice, {\n    padding: isModal ? '20px 15px 15px' : '5px 0'\n  });\n};\n\nvar footerBaseClassName = componentBaseClassNames.Footer;\n\nvar Footer = function Footer(props) {\n  var components = props.components,\n      getStyles = props.getStyles,\n      innerProps = props.innerProps,\n      isFullscreen = props.isFullscreen,\n      isModal = props.isModal;\n  var style = isModal ? {\n    background: 'linear-gradient(rgba(0,0,0,0), rgba(0,0,0,0.33))'\n  } : null;\n  var state = {\n    isFullscreen: isFullscreen,\n    isModal: isModal\n  };\n  var cn = {\n    container: className(footerBaseClassName, state),\n    caption: className('footer__caption', state),\n    count: className('footer__count', state)\n  };\n  var css = {\n    container: getStyles(footerBaseClassName, props),\n    caption: getStyles('footerCaption', props),\n    count: getStyles('footerCount', props)\n  };\n  var Caption = components.Caption,\n      Count = components.Count;\n  return glam(Div, _extends({\n    css: css.container,\n    className: cn.container // TODO glam prefixer fails on gradients\n    // https://github.com/threepointone/glam/issues/35\n    ,\n    style: style\n  }, innerProps), glam(Caption, props), glam(Count, props));\n}; // ==============================\n// Inner Elements\n// ==============================\n\n\nvar footerCaptionCSS = function footerCaptionCSS() {\n  return {};\n};\n\nvar FooterCaption = function FooterCaption(props) {\n  var currentView = props.currentView,\n      getStyles = props.getStyles,\n      isFullscreen = props.isFullscreen,\n      isModal = props.isModal;\n  var caption = currentView.caption;\n  var state = {\n    isFullscreen: isFullscreen,\n    isModal: isModal\n  };\n  return glam(Span, {\n    css: getStyles('footerCaption', props),\n    className: className('footer__caption', state)\n  }, typeof caption === 'string' ? ParseHtml('<span>' + caption + '</span>') : caption);\n};\n\nvar footerCountCSS = function footerCountCSS() {\n  return {\n    flexShrink: 0,\n    marginLeft: '1em'\n  };\n};\n\nvar FooterCount = function FooterCount(props) {\n  var currentIndex = props.currentIndex,\n      getStyles = props.getStyles,\n      isFullscreen = props.isFullscreen,\n      isModal = props.isModal,\n      views = props.views;\n  var state = {\n    isFullscreen: isFullscreen,\n    isModal: isModal\n  };\n  var activeView = currentIndex + 1;\n  var totalViews = views.length;\n  if (!activeView || !totalViews) return null;\n  return glam(Span, {\n    css: getStyles('footerCount', props),\n    className: className('footer__count', state)\n  }, activeView, ' of ', totalViews);\n};\n\nvar Svg = function Svg(_ref) {\n  var size = _ref.size,\n      props = objectWithoutProperties(_ref, ['size']);\n  return glam('svg', _extends({\n    role: 'presentation',\n    viewBox: '0 0 24 24',\n    css: {\n      display: 'inline-block',\n      fill: 'currentColor',\n      height: size,\n      stroke: 'currentColor',\n      strokeWidth: 0,\n      width: size\n    }\n  }, props));\n};\n\nvar ChevronLeft = function ChevronLeft(_ref2) {\n  var _ref2$size = _ref2.size,\n      size = _ref2$size === undefined ? 32 : _ref2$size,\n      props = objectWithoutProperties(_ref2, ['size']);\n  return glam(Svg, _extends({\n    size: size\n  }, props), glam('path', {\n    d: 'M15.422 16.078l-1.406 1.406-6-6 6-6 1.406 1.406-4.594 4.594z'\n  }));\n};\n\nvar ChevronRight = function ChevronRight(_ref3) {\n  var _ref3$size = _ref3.size,\n      size = _ref3$size === undefined ? 32 : _ref3$size,\n      props = objectWithoutProperties(_ref3, ['size']);\n  return glam(Svg, _extends({\n    size: size\n  }, props), glam('path', {\n    d: 'M9.984 6l6 6-6 6-1.406-1.406 4.594-4.594-4.594-4.594z'\n  }));\n};\n\nvar Close = function Close(_ref4) {\n  var _ref4$size = _ref4.size,\n      size = _ref4$size === undefined ? 32 : _ref4$size,\n      props = objectWithoutProperties(_ref4, ['size']);\n  return glam(Svg, _extends({\n    size: size\n  }, props), glam('path', {\n    d: 'M18.984 6.422l-5.578 5.578 5.578 5.578-1.406 1.406-5.578-5.578-5.578 5.578-1.406-1.406 5.578-5.578-5.578-5.578 1.406-1.406 5.578 5.578 5.578-5.578z'\n  }));\n};\n\nvar FullscreenEnter = function FullscreenEnter(_ref5) {\n  var _ref5$size = _ref5.size,\n      size = _ref5$size === undefined ? 32 : _ref5$size,\n      props = objectWithoutProperties(_ref5, ['size']);\n  return glam(Svg, _extends({\n    size: size\n  }, props), glam('path', {\n    d: 'M14.016 5.016h4.969v4.969h-1.969v-3h-3v-1.969zM17.016 17.016v-3h1.969v4.969h-4.969v-1.969h3zM5.016 9.984v-4.969h4.969v1.969h-3v3h-1.969zM6.984 14.016v3h3v1.969h-4.969v-4.969h1.969z'\n  }));\n};\n\nvar FullscreenExit = function FullscreenExit(_ref6) {\n  var _ref6$size = _ref6.size,\n      size = _ref6$size === undefined ? 32 : _ref6$size,\n      props = objectWithoutProperties(_ref6, ['size']);\n  return glam(Svg, _extends({\n    size: size\n  }, props), glam('path', {\n    d: 'M15.984 8.016h3v1.969h-4.969v-4.969h1.969v3zM14.016 18.984v-4.969h4.969v1.969h-3v3h-1.969zM8.016 8.016v-3h1.969v4.969h-4.969v-1.969h3zM5.016 15.984v-1.969h4.969v4.969h-1.969v-3h-3z'\n  }));\n};\n\nvar headerCSS = function headerCSS(_ref) {\n  var interactionIsIdle = _ref.interactionIsIdle;\n  return {\n    alignItems: 'center',\n    display: 'flex ',\n    flex: '0 0 auto',\n    justifyContent: 'space-between',\n    opacity: interactionIsIdle ? 0 : 1,\n    padding: 10,\n    paddingBottom: 20,\n    position: 'absolute',\n    transform: 'translateY(' + (interactionIsIdle ? -10 : 0) + 'px)',\n    transition: 'opacity 300ms, transform 300ms',\n    top: 0,\n    left: 0,\n    right: 0,\n    zIndex: 1,\n    '& *:focus': {\n      outline: '1.5px solid orange'\n    }\n  };\n};\n\nvar headerBaseClassName = componentBaseClassNames.Header;\n\nvar Header = function Header(props) {\n  var components = props.components,\n      getStyles = props.getStyles,\n      getCloseLabel = props.getCloseLabel,\n      getFullscreenLabel = props.getFullscreenLabel,\n      innerProps = props.innerProps,\n      isModal = props.isModal,\n      modalProps = props.modalProps;\n  if (!isModal) return null;\n  var allowFullscreen = modalProps.allowFullscreen,\n      isFullscreen = modalProps.isFullscreen,\n      onClose = modalProps.onClose,\n      toggleFullscreen = modalProps.toggleFullscreen;\n  var FsIcon = isFullscreen ? FullscreenExit : FullscreenEnter;\n  var CloseButton = components.CloseButton,\n      FullscreenButton = components.FullscreenButton;\n  var state = {\n    isFullscreen: isFullscreen,\n    isModal: isModal\n  };\n  return glam(Div, _extends({\n    css: getStyles(headerBaseClassName, props),\n    className: className(headerBaseClassName, state) // TODO glam prefixer fails on gradients\n    // https://github.com/threepointone/glam/issues/35\n    ,\n    style: {\n      background: 'linear-gradient(rgba(0,0,0,0.33), rgba(0,0,0,0))'\n    }\n  }, innerProps), glam('span', null), glam('span', null, allowFullscreen ? glam(FullscreenButton, {\n    getStyles: getStyles,\n    innerProps: {\n      onClick: toggleFullscreen,\n      title: getFullscreenLabel(state)\n    }\n  }, glam(FsIcon, {\n    size: 32\n  })) : null, glam(CloseButton, {\n    getStyles: getStyles,\n    innerProps: {\n      onClick: onClose,\n      title: getCloseLabel(state)\n    }\n  }, glam(Close, {\n    size: 32\n  }))));\n}; // ==============================\n// Header Buttons\n// ==============================\n\n\nvar headerButtonCSS = function headerButtonCSS() {\n  return {\n    alignItems: 'center',\n    background: 0,\n    border: 0,\n    color: 'rgba(255, 255, 255, 0.75)',\n    cursor: 'pointer',\n    display: 'inline-flex ',\n    height: 44,\n    justifyContent: 'center',\n    outline: 0,\n    padding: 0,\n    position: 'relative',\n    width: 44,\n    '&:hover': {\n      color: 'white'\n    }\n  };\n};\n\nvar headerFullscreenCSS = headerButtonCSS;\n\nvar HeaderFullscreen = function HeaderFullscreen(props) {\n  var children = props.children,\n      getStyles = props.getStyles,\n      innerProps = props.innerProps;\n  return glam(Button, _extends({\n    css: getStyles('headerFullscreen', props),\n    className: className(['header_button', 'header_button--fullscreen']),\n    type: 'button'\n  }, innerProps), children);\n};\n\nvar headerCloseCSS = headerButtonCSS;\n\nvar HeaderClose = function HeaderClose(props) {\n  var children = props.children,\n      getStyles = props.getStyles,\n      innerProps = props.innerProps;\n  return glam(Button, _extends({\n    css: getStyles('headerClose', props),\n    className: className(['header_button', 'header_button--close']),\n    type: 'button'\n  }, innerProps), children);\n}; // ==============================\n// Navigation\n// ==============================\n\n\nvar navigationCSS = function navigationCSS(_ref) {\n  var interactionIsIdle = _ref.interactionIsIdle;\n  return {\n    display: 'flex ',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    opacity: interactionIsIdle ? 0 : 1,\n    transition: 'opacity 300ms',\n    '& *:focus': {\n      outline: '1.5px solid orange'\n    }\n  };\n};\n\nvar Navigation = function Navigation(props) {\n  var children = props.children,\n      getStyles = props.getStyles,\n      isFullscreen = props.isFullscreen,\n      isModal = props.isModal,\n      showNavigationOnTouchDevice = props.showNavigationOnTouchDevice;\n  return !isTouch() || isTouch() && showNavigationOnTouchDevice ? glam(Nav, {\n    css: getStyles('navigation', props),\n    className: className('navigation', {\n      isFullscreen: isFullscreen,\n      isModal: isModal\n    })\n  }, children) : null;\n}; // ==============================\n// Nav Item\n// ==============================\n\n\nvar BUTTON_SIZE = 50;\n\nvar navigationItemCSS = function navigationItemCSS(_ref2) {\n  var _ref3;\n\n  var align = _ref2.align;\n  return _ref3 = {\n    alignItems: 'center',\n    background: 'rgba(255, 255, 255, 0.2)',\n    border: 0,\n    borderRadius: '50%',\n    color: 'white',\n    cursor: 'pointer',\n    display: 'flex ',\n    fontSize: 'inherit',\n    height: BUTTON_SIZE,\n    justifyContent: 'center',\n    marginTop: -(BUTTON_SIZE / 2),\n    outline: 0,\n    position: 'absolute',\n    top: '50%',\n    transition: 'background-color 200ms',\n    width: BUTTON_SIZE\n  }, defineProperty(_ref3, align, 20), defineProperty(_ref3, '&:hover', {\n    background: 'rgba(255, 255, 255, 0.3)'\n  }), defineProperty(_ref3, '&:active', {\n    background: 'rgba(255, 255, 255, 0.2)'\n  }), _ref3;\n};\n\nvar navigationPrevCSS = navigationItemCSS;\n\nvar NavigationPrev = function NavigationPrev(props) {\n  var _props$children = props.children,\n      children = _props$children === undefined ? glam(ChevronLeft, {\n    size: 48\n  }) : _props$children,\n      getStyles = props.getStyles,\n      innerProps = props.innerProps;\n  return glam(Button, _extends({\n    type: 'button',\n    css: getStyles('navigationPrev', props)\n  }, innerProps), children);\n};\n\nvar navigationNextCSS = navigationItemCSS;\n\nvar NavigationNext = function NavigationNext(props) {\n  var _props$children2 = props.children,\n      children = _props$children2 === undefined ? glam(ChevronRight, {\n    size: 48\n  }) : _props$children2,\n      getStyles = props.getStyles,\n      innerProps = props.innerProps;\n  return glam(Button, _extends({\n    type: 'button',\n    css: getStyles('navigationNext', props)\n  }, innerProps), children);\n}; // ==============================\n// Blanket\n// ==============================\n\n\nvar blanketCSS = function blanketCSS(_ref) {\n  var isFullscreen = _ref.isFullscreen;\n  return {\n    backgroundColor: isFullscreen ? 'black' : 'rgba(0, 0, 0, 0.8)',\n    bottom: 0,\n    left: 0,\n    position: 'fixed',\n    right: 0,\n    top: 0,\n    zIndex: 1199\n  };\n};\n\nvar Blanket = function Blanket(props) {\n  var getStyles = props.getStyles,\n      innerProps = props.innerProps,\n      isFullscreen = props.isFullscreen;\n  return glam(Div, _extends({\n    css: getStyles('blanket', props),\n    className: className('blanket', {\n      isFullscreen: isFullscreen\n    })\n  }, innerProps));\n}; // ==============================\n// Positioner\n// ==============================\n\n\nvar positionerCSS = function positionerCSS() {\n  return {\n    alignItems: 'center',\n    bottom: 0,\n    display: 'flex ',\n    justifyContent: 'center',\n    left: 0,\n    position: 'fixed',\n    right: 0,\n    top: 0,\n    zIndex: 1200\n  };\n};\n\nvar Positioner = function Positioner(props) {\n  var children = props.children,\n      getStyles = props.getStyles,\n      innerProps = props.innerProps,\n      isFullscreen = props.isFullscreen;\n  return glam(Div, _extends({\n    css: getStyles(componentBaseClassNames.Positioner, props),\n    className: className(componentBaseClassNames.Positioner, {\n      isFullscreen: isFullscreen\n    })\n  }, innerProps), children);\n}; // ==============================\n// Dialog\n// ==============================\n\n\nvar dialogCSS = function dialogCSS() {\n  return {\n    width: '100%'\n  };\n};\n\nvar Dialog = function Dialog(props) {\n  var children = props.children,\n      getStyles = props.getStyles,\n      innerProps = props.innerProps,\n      isFullscreen = props.isFullscreen,\n      removeFocusOn = props.removeFocusOn;\n  return removeFocusOn ? glam(Div, _extends({\n    css: getStyles('dialog', props),\n    className: className('dialog', {\n      isFullscreen: isFullscreen\n    })\n  }, innerProps), children) : glam(FocusOn, null, glam(Div, _extends({\n    css: getStyles('dialog', props),\n    className: className('dialog', {\n      isFullscreen: isFullscreen\n    })\n  }, innerProps), children));\n};\n\nfunction getSource(_ref) {\n  var data = _ref.data,\n      isFullscreen = _ref.isFullscreen;\n  var _data$source = data.source,\n      source = _data$source === undefined ? data.src : _data$source;\n  if (typeof source === 'string') return source;\n  return isFullscreen ? source.fullscreen : source.regular;\n}\n\nvar viewCSS = function viewCSS() {\n  return {\n    lineHeight: 0,\n    position: 'relative',\n    textAlign: 'center'\n  };\n};\n\nvar viewBaseClassName = componentBaseClassNames.View;\n\nvar View = function View(props) {\n  var data = props.data,\n      formatters = props.formatters,\n      getStyles = props.getStyles,\n      index = props.index,\n      isFullscreen = props.isFullscreen,\n      isModal = props.isModal;\n  var innerProps = {\n    alt: formatters.getAltText({\n      data: data,\n      index: index\n    }),\n    src: getSource({\n      data: data,\n      isFullscreen: isFullscreen\n    })\n  };\n  return glam(Div, {\n    css: getStyles(viewBaseClassName, props),\n    className: className(viewBaseClassName, {\n      isFullscreen: isFullscreen,\n      isModal: isModal\n    })\n  }, glam(Img, _extends({}, innerProps, {\n    className: className('view-image', {\n      isFullscreen: isFullscreen,\n      isModal: isModal\n    }),\n    css: {\n      height: 'auto',\n      maxHeight: '100%',\n      maxWidth: '100%',\n      userSelect: 'none',\n      margin: 'auto'\n    }\n  })));\n};\n\nvar carouselComponents = {\n  Container: Container,\n  Footer: Footer,\n  FooterCaption: FooterCaption,\n  FooterCount: FooterCount,\n  Header: Header,\n  HeaderClose: HeaderClose,\n  HeaderFullscreen: HeaderFullscreen,\n  Navigation: Navigation,\n  NavigationPrev: NavigationPrev,\n  NavigationNext: NavigationNext,\n  View: View\n};\n\nvar defaultCarouselComponents = function defaultCarouselComponents(providedComponents) {\n  return _extends({}, carouselComponents, providedComponents);\n}; // ==============================\n// Modal\n// ==============================\n\n\nvar modalComponents = {\n  Blanket: Blanket,\n  Positioner: Positioner,\n  Dialog: Dialog\n};\n\nvar defaultModalComponents = function defaultModalComponents(providedComponents) {\n  return _extends({}, modalComponents, providedComponents);\n};\n\nvar defaultCarouselStyles = {\n  container: containerCSS,\n  footer: footerCSS,\n  footerCaption: footerCaptionCSS,\n  footerCount: footerCountCSS,\n  header: headerCSS,\n  headerClose: headerCloseCSS,\n  headerFullscreen: headerFullscreenCSS,\n  navigation: navigationCSS,\n  navigationPrev: navigationPrevCSS,\n  navigationNext: navigationNextCSS,\n  view: viewCSS\n};\nvar defaultModalStyles = {\n  blanket: blanketCSS,\n  dialog: dialogCSS,\n  positioner: positionerCSS\n};\nvar easing = 'cubic-bezier(0.23, 1, 0.32, 1)'; // easeOutQuint\n\nvar verticalOffset = 40; // ==============================\n// Fade\n// ==============================\n\nvar Fade = function Fade(_ref) {\n  var Tag = _ref.component,\n      onEntered = _ref.onEntered,\n      onExited = _ref.onExited,\n      inProp = _ref.in,\n      originalProps = _ref.innerProps,\n      props = objectWithoutProperties(_ref, ['component', 'onEntered', 'onExited', 'in', 'innerProps']);\n  var enter = 300;\n  var exit = 500;\n  var fadeStyle = {\n    transition: 'opacity 200ms',\n    opacity: 0\n  };\n  var fadeTransition = {\n    entering: {\n      opacity: 0\n    },\n    entered: {\n      opacity: 1\n    },\n    exiting: {\n      opacity: 0,\n      transitionDuration: exit + 'ms'\n    }\n  };\n  return /*#__PURE__*/React.createElement(Transition, {\n    appear: true,\n    mountOnEnter: true,\n    unmountOnExit: true,\n    onEntered: onEntered,\n    onExited: onExited,\n    key: 'fade',\n    'in': inProp,\n    timeout: {\n      enter: enter,\n      exit: exit\n    }\n  }, function (status) {\n    var innerProps = _extends({}, originalProps, {\n      style: _extends({}, fadeStyle, fadeTransition[status])\n    });\n\n    if (status === 'exited') return null;\n    return /*#__PURE__*/React.createElement(Tag, _extends({\n      innerProps: innerProps\n    }, props));\n  });\n};\n\nvar SlideUp = function SlideUp(_ref2) {\n  var Tag = _ref2.component,\n      onEntered = _ref2.onEntered,\n      onExited = _ref2.onExited,\n      inProp = _ref2.in,\n      originalProps = _ref2.innerProps,\n      props = objectWithoutProperties(_ref2, ['component', 'onEntered', 'onExited', 'in', 'innerProps']);\n  var enter = 300;\n  var exit = 500;\n  var restingTransform = 'translate3d(0, 0, 0)';\n  var slideStyle = {\n    transition: 'transform ' + enter + 'ms ' + easing + ', opacity ' + enter + 'ms ' + easing,\n    transform: restingTransform\n  };\n  var slideTransition = {\n    entering: {\n      opacity: 0,\n      transform: 'translate3d(0, ' + verticalOffset + 'px, 0) scale(0.9)'\n    },\n    entered: {\n      opacity: 1,\n      transform: restingTransform\n    },\n    exiting: {\n      opacity: 0,\n      transform: 'translate3d(0, ' + verticalOffset + 'px, 0) scale(0.9)',\n      transition: 'transform ' + exit + 'ms ' + easing + ', opacity ' + exit + 'ms ' + easing\n    }\n  };\n  return /*#__PURE__*/React.createElement(Transition, {\n    appear: true,\n    'in': inProp,\n    mountOnEnter: true,\n    onEntered: onEntered,\n    onExited: onExited,\n    timeout: {\n      enter: enter,\n      exit: exit\n    },\n    unmountOnExit: true\n  }, function (status) {\n    if (status === 'exited') return null;\n\n    var innerProps = _extends({}, originalProps, {\n      style: _extends({}, slideStyle, slideTransition[status])\n    });\n\n    return /*#__PURE__*/React.createElement(Tag, _extends({\n      innerProps: innerProps\n    }, props));\n  });\n};\n\nvar defaultProps = {\n  allowFullscreen: !isTouch(),\n  closeOnBackdropClick: true,\n  closeOnEsc: true,\n  preventScroll: true,\n  styles: {}\n};\n/** Classes that when clicked on, close the backdrop */\n\nvar backdropClassNames = new Set([componentBaseClassNames.View, componentBaseClassNames.Header, componentBaseClassNames.Footer, componentBaseClassNames.Track, componentBaseClassNames.Positioner].map(className));\n\nvar Modal = function (_Component) {\n  inherits(Modal, _Component); // TODO\n\n  function Modal(props) {\n    classCallCheck(this, Modal);\n\n    var _this = possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.cacheComponents(props.components);\n\n    _this.state = {\n      isFullscreen: false,\n      isClosing: false\n    };\n    return _this;\n  }\n\n  createClass(Modal, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.components !== this.props.components) {\n        this.cacheComponents(prevProps.components);\n      }\n    } // emulate `componentDidMount` & `componentWillUnmount`\n    // called on complete of enter & exit transitions respectively\n\n  }, {\n    key: 'getCommonProps',\n    value: function getCommonProps() {\n      var isFullscreen = this.state.isFullscreen;\n      return {\n        getStyles: this.getStyles,\n        isFullscreen: isFullscreen,\n        modalProps: this.props\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _components = this.components,\n          Blanket = _components.Blanket,\n          Positioner = _components.Positioner,\n          Dialog = _components.Dialog;\n      var _props = this.props,\n          allowFullscreen = _props.allowFullscreen,\n          children = _props.children;\n      var isFullscreen = this.state.isFullscreen;\n      var commonProps = this.commonProps = this.getCommonProps(); // $FlowFixMe\n\n      var transitionIn = this.props.in; // forward props to modal for use in internal components\n\n      var modalProps = {\n        allowFullscreen: allowFullscreen,\n        isFullscreen: isFullscreen,\n        onClose: this.handleClose,\n        preventScroll: this.preventScroll,\n        toggleFullscreen: this.toggleFullscreen\n      }; // augment user carousel with modal props\n      // $FlowFixMe\n\n      var carouselComponent = /*#__PURE__*/cloneElement(children, {\n        isModal: true,\n        modalProps: modalProps\n      });\n      return glam(Fullscreen, {\n        enabled: isFullscreen,\n        onChange: this.handleFullscreenChange\n      }, glam(Fade, _extends({}, commonProps, {\n        component: Blanket,\n        'in': transitionIn\n      })), glam(SlideUp, _extends({}, commonProps, {\n        component: Positioner,\n        'in': transitionIn,\n        innerProps: {\n          onClick: this.state.isClosing ? null : this.handleBackdropClick\n        },\n        onEntered: this.modalDidMount,\n        onExited: this.modalWillUnmount\n      }), glam(Dialog, _extends({\n        removeFocusOn: this.state.isClosing\n      }, commonProps), carouselComponent)));\n    }\n  }]);\n  return Modal;\n}(Component);\n\nModal.defaultProps = defaultProps;\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.modalDidMount = function () {\n    document.addEventListener('keyup', _this2.handleKeyUp);\n    focusStore.storeFocus();\n  };\n\n  this.modalWillUnmount = function () {\n    document.removeEventListener('keyup', _this2.handleKeyUp);\n    focusStore.restoreFocus();\n\n    _this2.setState({\n      isClosing: false\n    });\n  };\n\n  this.cacheComponents = function (comps) {\n    _this2.components = defaultModalComponents(comps);\n  };\n\n  this.handleFullscreenChange = function (isFullscreen) {\n    _this2.setState({\n      isFullscreen: isFullscreen\n    });\n  };\n\n  this.handleKeyUp = function (event) {\n    var _props2 = _this2.props,\n        allowFullscreen = _props2.allowFullscreen,\n        closeOnEsc = _props2.closeOnEsc;\n    var isFullscreen = _this2.state.isFullscreen;\n    var allowClose = event.key === 'Escape' && closeOnEsc && !isFullscreen; // toggle fullscreen\n\n    if (allowFullscreen && event.key === 'f') {\n      _this2.toggleFullscreen();\n    } // close on escape when not fullscreen\n\n\n    if (allowClose) _this2.handleClose(event);\n  };\n\n  this.handleBackdropClick = function (event) {\n    var hasBackdropClassName = false;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = event.target.classList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var targetClass = _step.value;\n\n        if (backdropClassNames.has(targetClass)) {\n          hasBackdropClassName = true;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (!hasBackdropClassName || !_this2.props.closeOnBackdropClick) {\n      return;\n    }\n\n    _this2.handleClose(event);\n  };\n\n  this.toggleFullscreen = function () {\n    _this2.setState(function (state) {\n      return {\n        isFullscreen: !state.isFullscreen\n      };\n    });\n  };\n\n  this.handleClose = function (event) {\n    var onClose = _this2.props.onClose;\n    var isFullscreen = _this2.state.isFullscreen;\n\n    _this2.setState({\n      isClosing: true\n    }); // force exit fullscreen mode on close\n\n\n    if (isFullscreen) {\n      _this2.toggleFullscreen();\n    } // call the consumer's onClose func\n\n\n    onClose(event);\n  };\n\n  this.getStyles = function (key, props) {\n    var base = defaultModalStyles[key](props);\n    base.boxSizing = 'border-box';\n    var custom = _this2.props.styles[key];\n    return custom ? custom(base, props) : base;\n  };\n}; // ==============================\n// Navigation\n// ==============================\n\n/* ARIA label for the next button */\n// NOTE: props aren't used by default for some getters but consumers may need\n// them, this needs to be reflected in the flow type.\n\n/* eslint-disable no-unused-vars */\n\n\nfunction getNextLabel(_ref) {\n  var currentIndex = _ref.currentIndex,\n      views = _ref.views;\n  return 'Show slide ' + (currentIndex + 2) + ' of ' + views.length;\n}\n/* ARIA label for the previous button */\n\n\nfunction getPrevLabel(_ref2) {\n  var currentIndex = _ref2.currentIndex,\n      views = _ref2.views;\n  return 'Show slide ' + currentIndex + ' of ' + views.length;\n}\n/* HTML title for the next button */\n\n\nfunction getNextTitle(props) {\n  return 'Next (right arrow)';\n}\n/* HTML title for the previous button */\n\n\nfunction getPrevTitle(props) {\n  return 'Previous (left arrow)';\n} // ==============================\n// Header\n// ==============================\n\n/* ARIA label for the close button */\n\n\nfunction getCloseLabel(props) {\n  return 'Close (esc)';\n}\n/* ARIA label for the fullscreen button */\n\n\nfunction getFullscreenLabel(_ref3) {\n  var isFullscreen = _ref3.isFullscreen;\n  return isFullscreen ? 'Exit fullscreen (f)' : 'Enter fullscreen (f)';\n} // ==============================\n// View\n// ==============================\n\n/* alt text for each image in the carousel */\n\n\nfunction getAltText(_ref4) {\n  var data = _ref4.data,\n      index = _ref4.index;\n  if (data.caption) return data.caption;\n  return 'Image ' + (index + 1);\n} // ==============================\n// Exports\n// ==============================\n\n\nvar formatters = {\n  getAltText: getAltText,\n  getNextLabel: getNextLabel,\n  getPrevLabel: getPrevLabel,\n  getNextTitle: getNextTitle,\n  getPrevTitle: getPrevTitle,\n  getCloseLabel: getCloseLabel,\n  getFullscreenLabel: getFullscreenLabel\n};\nvar viewPagerStyles = {\n  flex: '1 1 auto',\n  position: 'relative'\n};\nvar frameStyles = {\n  outline: 0\n};\nvar defaultProps$1 = {\n  currentIndex: 0,\n  formatters: formatters,\n  hideControlsWhenIdle: 3000,\n  showNavigationOnTouchDevice: false,\n  styles: {},\n  trackProps: {\n    instant: !isTouch(),\n    swipe: 'touch'\n  }\n};\nvar trackBaseClassName = componentBaseClassNames.Track;\n\nvar Carousel = function (_Component) {\n  inherits(Carousel, _Component);\n\n  function Carousel(props) {\n    classCallCheck(this, Carousel);\n\n    var _this = possibleConstructorReturn(this, (Carousel.__proto__ || Object.getPrototypeOf(Carousel)).call(this, props));\n\n    _initialiseProps$1.call(_this);\n\n    _this.cacheComponents(props.components);\n\n    _this.state = {\n      currentIndex: props.currentIndex,\n      interactionIsIdle: isTouch()\n    };\n    return _this;\n  } // TODO\n\n\n  createClass(Carousel, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          hideControlsWhenIdle = _props.hideControlsWhenIdle,\n          modalProps = _props.modalProps;\n      var isModal = Boolean(modalProps);\n      this.mounted = true;\n\n      if (hideControlsWhenIdle && this.container) {\n        this.container.addEventListener('mousedown', this.handleMouseActivity);\n        this.container.addEventListener('mousemove', this.handleMouseActivity);\n        this.container.addEventListener('touchmove', this.handleMouseActivity);\n      }\n\n      if (isModal) {\n        this.focusViewFrame();\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.components !== this.props.components) {\n        this.cacheComponents(prevProps.components);\n      }\n\n      if (this.props.currentIndex !== prevProps.currentIndex) {\n        this.setState({\n          currentIndex: this.props.currentIndex\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.mounted = false;\n\n      if (this.props.hideControlsWhenIdle && this.container) {\n        this.container.removeEventListener('mousedown', this.handleMouseActivity);\n        this.container.removeEventListener('mousemove', this.handleMouseActivity);\n        this.container.removeEventListener('touchmove', this.handleMouseActivity);\n        this.handleMouseActivity.cancel();\n      }\n    } // ==============================\n    // Refs\n    // ==============================\n    // ==============================\n    // Utilities\n    // ==============================\n    // combine defaultProps with consumer props to maintain expected behaviour\n    // combine defaultProps with consumer props to maintain expected behaviour\n    // ==============================\n    // Handlers\n    // ==============================\n    // ==============================\n    // Renderers\n    // ==============================\n\n  }, {\n    key: 'getCommonProps',\n    value: function getCommonProps() {\n      var _props2 = this.props,\n          frameProps = _props2.frameProps,\n          trackProps = _props2.trackProps,\n          modalProps = _props2.modalProps,\n          views = _props2.views,\n          showNavigationOnTouchDevice = _props2.showNavigationOnTouchDevice;\n      var isModal = Boolean(modalProps);\n      var isFullscreen = Boolean(modalProps && modalProps.isFullscreen);\n      var _state = this.state,\n          currentIndex = _state.currentIndex,\n          interactionIsIdle = _state.interactionIsIdle;\n      var currentView = this.getViewData();\n      return {\n        carouselProps: this.props,\n        currentIndex: currentIndex,\n        currentView: currentView,\n        formatters: this.props.formatters,\n        frameProps: frameProps,\n        getStyles: this.getStyles,\n        showNavigationOnTouchDevice: showNavigationOnTouchDevice,\n        isFullscreen: isFullscreen,\n        isModal: isModal,\n        modalProps: modalProps,\n        interactionIsIdle: interactionIsIdle,\n        trackProps: trackProps,\n        views: views\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _components = this.components,\n          Container = _components.Container,\n          View = _components.View;\n      var currentIndex = this.state.currentIndex;\n      var _props3 = this.props,\n          frameProps = _props3.frameProps,\n          views = _props3.views;\n      var commonProps = this.commonProps = this.getCommonProps();\n      return glam(Container, _extends({}, commonProps, {\n        innerProps: {\n          innerRef: this.getContainer\n        }\n      }), this.renderHeader(), glam(ViewPager, {\n        tag: 'main',\n        style: viewPagerStyles,\n        className: className('pager')\n      }, glam(Frame, _extends({}, frameProps, {\n        ref: this.getFrame,\n        className: className('frame'),\n        style: frameStyles,\n        tabIndex: '-1'\n      }), glam(Track, _extends({}, this.getTrackProps(this.props), {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        currentView: currentIndex,\n        className: className(trackBaseClassName),\n        onViewChange: this.handleViewChange,\n        ref: this.getTrack\n      }), views && views.map(function (data, index) {\n        return glam(View$1, {\n          className: className('view-wrapper'),\n          key: index\n        }, glam(View, _extends({}, commonProps, {\n          data: data,\n          index: index\n        })));\n      }))), this.renderNavigation()), this.renderFooter());\n    }\n  }]);\n  return Carousel;\n}(Component);\n\nCarousel.defaultProps = defaultProps$1;\n\nvar _initialiseProps$1 = function _initialiseProps() {\n  var _this2 = this;\n\n  this.mounted = false;\n\n  this.cacheComponents = function (comps) {\n    _this2.components = defaultCarouselComponents(comps);\n  };\n\n  this.getContainer = function (ref) {\n    _this2.container = ref;\n  };\n\n  this.getFooter = function (ref) {\n    _this2.footer = ref;\n  };\n\n  this.getFrame = function (ref) {\n    _this2.frame = findDOMNode(ref);\n  };\n\n  this.getHeader = function (ref) {\n    _this2.header = ref;\n  };\n\n  this.getTrack = function (ref) {\n    _this2.track = ref;\n  };\n\n  this.hasPreviousView = function () {\n    var trackProps = _this2.props.trackProps;\n    var currentIndex = _this2.state.currentIndex;\n    return trackProps.infinite || currentIndex !== 0;\n  };\n\n  this.hasNextView = function () {\n    var _props4 = _this2.props,\n        trackProps = _props4.trackProps,\n        views = _props4.views;\n    var currentIndex = _this2.state.currentIndex;\n    return trackProps.infinite || currentIndex !== views.length - 1;\n  };\n\n  this.getStyles = function (key, props) {\n    var base = defaultCarouselStyles[key](props);\n    base.boxSizing = 'border-box';\n    var custom = _this2.props.styles[key];\n    return custom ? custom(base, props) : base;\n  };\n\n  this.getTrackProps = function (props) {\n    return _extends({}, defaultProps$1.trackProps, props.trackProps);\n  };\n\n  this.getFormatters = function () {\n    return _extends({}, defaultProps$1.formatters, _this2.props.formatters);\n  };\n\n  this.getViewData = function () {\n    var views = _this2.props.views;\n    var currentIndex = _this2.state.currentIndex;\n    return views[currentIndex];\n  };\n\n  this.focusViewFrame = function () {\n    if (_this2.frame && document.activeElement !== _this2.frame) {\n      _this2.frame.focus();\n    }\n  };\n\n  this.prev = function (event) {\n    event.stopPropagation();\n\n    _this2.track.prev();\n\n    _this2.focusViewFrame();\n  };\n\n  this.next = function (event) {\n    event.stopPropagation();\n\n    _this2.track.next();\n\n    _this2.focusViewFrame();\n  };\n\n  this.handleMouseActivity = rafScheduler(function () {\n    clearTimeout(_this2.timer);\n\n    if (_this2.state.interactionIsIdle) {\n      _this2.setState({\n        interactionIsIdle: false\n      });\n    }\n\n    _this2.timer = setTimeout(function () {\n      if (_this2.mounted) {\n        _this2.setState({\n          interactionIsIdle: true\n        });\n      }\n    }, _this2.props.hideControlsWhenIdle);\n  });\n\n  this.handleViewChange = function (indicies) {\n    var trackProps = _this2.props.trackProps; // simplify by enforcing number\n\n    var currentIndex = indicies[0];\n\n    _this2.setState({\n      currentIndex: currentIndex\n    }); // call the consumer's onViewChange fn\n\n\n    if (trackProps && trackProps.onViewChange) {\n      trackProps.onViewChange(currentIndex);\n    }\n  };\n\n  this.renderNavigation = function () {\n    var _getFormatters = _this2.getFormatters(),\n        getNextLabel = _getFormatters.getNextLabel,\n        getPrevLabel = _getFormatters.getPrevLabel,\n        getNextTitle = _getFormatters.getNextTitle,\n        getPrevTitle = _getFormatters.getPrevTitle;\n\n    var _components2 = _this2.components,\n        Navigation = _components2.Navigation,\n        NavigationPrev = _components2.NavigationPrev,\n        NavigationNext = _components2.NavigationNext;\n    var commonProps = _this2.commonProps;\n\n    var showPrev = _this2.hasPreviousView();\n\n    var showNext = _this2.hasNextView();\n\n    var showNav = (showPrev || showNext) && Navigation;\n    return showNav ? glam(Navigation, commonProps, showPrev && glam(NavigationPrev, _extends({}, commonProps, {\n      align: 'left',\n      innerProps: {\n        'aria-label': getPrevLabel(commonProps),\n        onClick: _this2.prev,\n        title: getPrevTitle(commonProps)\n      }\n    })), showNext && glam(NavigationNext, _extends({}, commonProps, {\n      align: 'right',\n      innerProps: {\n        'aria-label': getNextLabel(commonProps),\n        onClick: _this2.next,\n        title: getNextTitle(commonProps)\n      }\n    }))) : null;\n  };\n\n  this.renderFooter = function () {\n    var _components3 = _this2.components,\n        Footer = _components3.Footer,\n        FooterCaption = _components3.FooterCaption,\n        FooterCount = _components3.FooterCount;\n    var commonProps = _this2.commonProps;\n    return Footer ? glam(Footer, _extends({}, commonProps, {\n      components: {\n        Caption: FooterCaption,\n        Count: FooterCount\n      },\n      innerProps: {\n        innerRef: _this2.getFooter\n      }\n    })) : null;\n  };\n\n  this.renderHeader = function () {\n    var _components4 = _this2.components,\n        Header = _components4.Header,\n        HeaderClose = _components4.HeaderClose,\n        HeaderFullscreen = _components4.HeaderFullscreen;\n\n    var _getFormatters2 = _this2.getFormatters(),\n        getCloseLabel = _getFormatters2.getCloseLabel,\n        getFullscreenLabel = _getFormatters2.getFullscreenLabel;\n\n    var commonProps = _this2.commonProps;\n    return Header ? glam(Header, _extends({}, commonProps, {\n      getCloseLabel: getCloseLabel,\n      getFullscreenLabel: getFullscreenLabel,\n      components: {\n        CloseButton: HeaderClose,\n        FullscreenButton: HeaderFullscreen\n      },\n      data: _this2.getViewData(),\n      innerProps: {\n        innerRef: _this2.getHeader\n      }\n    })) : null;\n  };\n};\n\nvar FirstChild = function FirstChild(_ref) {\n  var children = _ref.children;\n  return Children.toArray(children)[0] || null;\n};\n\nvar ModalGateway = function (_Component) {\n  inherits(ModalGateway, _Component);\n\n  function ModalGateway() {\n    classCallCheck(this, ModalGateway);\n    return possibleConstructorReturn(this, (ModalGateway.__proto__ || Object.getPrototypeOf(ModalGateway)).apply(this, arguments));\n  }\n\n  createClass(ModalGateway, [{\n    key: 'render',\n    value: function render() {\n      if (typeof window === 'undefined') return null;\n      var _props = this.props,\n          target = _props.target,\n          children = _props.children;\n      return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(TransitionGroup, {\n        component: FirstChild,\n        children: children\n      }), target);\n    }\n  }]);\n  return ModalGateway;\n}(Component);\n\nModalGateway.defaultProps = {\n  target: typeof window !== 'undefined' ? document.body : null\n};\nexport default Carousel;\nexport { Modal, ModalGateway, carouselComponents, modalComponents };","map":null,"metadata":{},"sourceType":"module"}