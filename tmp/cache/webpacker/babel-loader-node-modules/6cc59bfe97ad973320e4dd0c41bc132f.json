{"ast":null,"code":"import { Module } from \"./module\";\nimport { Multimap } from \"@stimulus/multimap\";\nimport { ScopeObserver } from \"./scope_observer\";\n\nvar Router =\n/** @class */\nfunction () {\n  function Router(application) {\n    this.application = application;\n    this.scopeObserver = new ScopeObserver(this.element, this.schema, this);\n    this.scopesByIdentifier = new Multimap();\n    this.modulesByIdentifier = new Map();\n  }\n\n  Object.defineProperty(Router.prototype, \"element\", {\n    get: function get() {\n      return this.application.element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Router.prototype, \"schema\", {\n    get: function get() {\n      return this.application.schema;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Router.prototype, \"controllerAttribute\", {\n    get: function get() {\n      return this.schema.controllerAttribute;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Router.prototype, \"modules\", {\n    get: function get() {\n      return Array.from(this.modulesByIdentifier.values());\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Router.prototype, \"contexts\", {\n    get: function get() {\n      return this.modules.reduce(function (contexts, module) {\n        return contexts.concat(module.contexts);\n      }, []);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Router.prototype.start = function () {\n    this.scopeObserver.start();\n  };\n\n  Router.prototype.stop = function () {\n    this.scopeObserver.stop();\n  };\n\n  Router.prototype.loadDefinition = function (definition) {\n    this.unloadIdentifier(definition.identifier);\n    var module = new Module(this.application, definition);\n    this.connectModule(module);\n  };\n\n  Router.prototype.unloadIdentifier = function (identifier) {\n    var module = this.modulesByIdentifier.get(identifier);\n\n    if (module) {\n      this.disconnectModule(module);\n    }\n  };\n\n  Router.prototype.getContextForElementAndIdentifier = function (element, identifier) {\n    var module = this.modulesByIdentifier.get(identifier);\n\n    if (module) {\n      return module.contexts.find(function (context) {\n        return context.element == element;\n      });\n    }\n  }; // Error handler delegate\n\n  /** @hidden */\n\n\n  Router.prototype.handleError = function (error, message, detail) {\n    this.application.handleError(error, message, detail);\n  }; // Scope observer delegate\n\n  /** @hidden */\n\n\n  Router.prototype.scopeConnected = function (scope) {\n    this.scopesByIdentifier.add(scope.identifier, scope);\n    var module = this.modulesByIdentifier.get(scope.identifier);\n\n    if (module) {\n      module.connectContextForScope(scope);\n    }\n  };\n  /** @hidden */\n\n\n  Router.prototype.scopeDisconnected = function (scope) {\n    this.scopesByIdentifier.delete(scope.identifier, scope);\n    var module = this.modulesByIdentifier.get(scope.identifier);\n\n    if (module) {\n      module.disconnectContextForScope(scope);\n    }\n  }; // Modules\n\n\n  Router.prototype.connectModule = function (module) {\n    this.modulesByIdentifier.set(module.identifier, module);\n    var scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n    scopes.forEach(function (scope) {\n      return module.connectContextForScope(scope);\n    });\n  };\n\n  Router.prototype.disconnectModule = function (module) {\n    this.modulesByIdentifier.delete(module.identifier);\n    var scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n    scopes.forEach(function (scope) {\n      return module.disconnectContextForScope(scope);\n    });\n  };\n\n  return Router;\n}();\n\nexport { Router };","map":null,"metadata":{},"sourceType":"module"}