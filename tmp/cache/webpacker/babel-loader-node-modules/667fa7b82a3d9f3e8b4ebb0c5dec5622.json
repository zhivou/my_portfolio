{"ast":null,"code":"module.exports = function (el, options) {\n  options = options || {};\n  var elementDocument = el.ownerDocument || el;\n  var basicTabbables = [];\n  var orderedTabbables = []; // A node is \"available\" if\n  // - it's computed style\n\n  var isUnavailable = createIsUnavailable(elementDocument);\n  var candidateSelectors = ['input', 'select', 'a[href]', 'textarea', 'button', '[tabindex]'];\n  var candidates = el.querySelectorAll(candidateSelectors.join(','));\n\n  if (options.includeContainer) {\n    var matches = Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\n    if (candidateSelectors.some(function (candidateSelector) {\n      return matches.call(el, candidateSelector);\n    })) {\n      candidates = Array.prototype.slice.apply(candidates);\n      candidates.unshift(el);\n    }\n  }\n\n  var candidate, candidateIndex;\n\n  for (var i = 0, l = candidates.length; i < l; i++) {\n    candidate = candidates[i];\n    candidateIndex = parseInt(candidate.getAttribute('tabindex'), 10) || candidate.tabIndex;\n\n    if (candidateIndex < 0 || candidate.tagName === 'INPUT' && candidate.type === 'hidden' || candidate.disabled || isUnavailable(candidate, elementDocument)) {\n      continue;\n    }\n\n    if (candidateIndex === 0) {\n      basicTabbables.push(candidate);\n    } else {\n      orderedTabbables.push({\n        index: i,\n        tabIndex: candidateIndex,\n        node: candidate\n      });\n    }\n  }\n\n  var tabbableNodes = orderedTabbables.sort(function (a, b) {\n    return a.tabIndex === b.tabIndex ? a.index - b.index : a.tabIndex - b.tabIndex;\n  }).map(function (a) {\n    return a.node;\n  });\n  Array.prototype.push.apply(tabbableNodes, basicTabbables);\n  return tabbableNodes;\n};\n\nfunction createIsUnavailable(elementDocument) {\n  // Node cache must be refreshed on every check, in case\n  // the content of the element has changed\n  var isOffCache = []; // \"off\" means `display: none;`, as opposed to \"hidden\",\n  // which means `visibility: hidden;`. getComputedStyle\n  // accurately reflects visiblity in context but not\n  // \"off\" state, so we need to recursively check parents.\n\n  function isOff(node, nodeComputedStyle) {\n    if (node === elementDocument.documentElement) return false; // Find the cached node (Array.prototype.find not available in IE9)\n\n    for (var i = 0, length = isOffCache.length; i < length; i++) {\n      if (isOffCache[i][0] === node) return isOffCache[i][1];\n    }\n\n    nodeComputedStyle = nodeComputedStyle || elementDocument.defaultView.getComputedStyle(node);\n    var result = false;\n\n    if (nodeComputedStyle.display === 'none') {\n      result = true;\n    } else if (node.parentNode) {\n      result = isOff(node.parentNode);\n    }\n\n    isOffCache.push([node, result]);\n    return result;\n  }\n\n  return function isUnavailable(node) {\n    if (node === elementDocument.documentElement) return false;\n    var computedStyle = elementDocument.defaultView.getComputedStyle(node);\n    if (isOff(node, computedStyle)) return true;\n    return computedStyle.visibility === 'hidden';\n  };\n}","map":null,"metadata":{},"sourceType":"module"}