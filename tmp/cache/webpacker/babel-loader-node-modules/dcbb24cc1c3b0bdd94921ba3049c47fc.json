{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { RemoveScroll } from 'react-remove-scroll/UI';\nimport ReactFocusLock from 'react-focus-lock/UI';\nimport { effectCar } from './medium';\nexport var FocusOn = /*#__PURE__*/React.forwardRef(function (props, parentRef) {\n  var _a = React.useState(false),\n      lockProps = _a[0],\n      setLockProps = _a[1];\n\n  var children = props.children,\n      autoFocus = props.autoFocus,\n      shards = props.shards,\n      _b = props.enabled,\n      enabled = _b === void 0 ? true : _b,\n      _c = props.scrollLock,\n      scrollLock = _c === void 0 ? true : _c,\n      _d = props.focusLock,\n      focusLock = _d === void 0 ? true : _d,\n      _e = props.returnFocus,\n      returnFocus = _e === void 0 ? true : _e,\n      inert = props.inert,\n      allowPinchZoom = props.allowPinchZoom,\n      sideCar = props.sideCar,\n      className = props.className,\n      shouldIgnore = props.shouldIgnore,\n      style = props.style,\n      as = props.as,\n      rest = tslib_1.__rest(props, [\"children\", \"autoFocus\", \"shards\", \"enabled\", \"scrollLock\", \"focusLock\", \"returnFocus\", \"inert\", \"allowPinchZoom\", \"sideCar\", \"className\", \"shouldIgnore\", \"style\", \"as\"]);\n\n  var SideCar = sideCar;\n\n  var onActivation = lockProps.onActivation,\n      onDeactivation = lockProps.onDeactivation,\n      restProps = tslib_1.__rest(lockProps, [\"onActivation\", \"onDeactivation\"]);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReactFocusLock, {\n    ref: parentRef,\n    sideCar: sideCar,\n    disabled: !(lockProps && enabled && focusLock),\n    returnFocus: returnFocus,\n    autoFocus: autoFocus,\n    shards: shards,\n    onActivation: onActivation,\n    onDeactivation: onDeactivation,\n    className: className,\n    as: RemoveScroll,\n    whiteList: shouldIgnore,\n    lockProps: tslib_1.__assign({}, restProps, {\n      sideCar: sideCar,\n      shards: shards,\n      allowPinchZoom: allowPinchZoom,\n      as: as,\n      inert: inert,\n      style: style,\n      enabled: enabled && scrollLock\n    })\n  }, children), enabled && /*#__PURE__*/React.createElement(SideCar, tslib_1.__assign({}, rest, {\n    sideCar: effectCar,\n    setLockProps: setLockProps,\n    shards: shards\n  })));\n});\nexport * from './reExports';","map":null,"metadata":{},"sourceType":"module"}