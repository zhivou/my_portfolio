{"ast":null,"code":"var DataMap =\n/** @class */\nfunction () {\n  function DataMap(scope) {\n    this.scope = scope;\n  }\n\n  Object.defineProperty(DataMap.prototype, \"element\", {\n    get: function get() {\n      return this.scope.element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataMap.prototype, \"identifier\", {\n    get: function get() {\n      return this.scope.identifier;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  DataMap.prototype.get = function (key) {\n    key = this.getFormattedKey(key);\n    return this.element.getAttribute(key);\n  };\n\n  DataMap.prototype.set = function (key, value) {\n    key = this.getFormattedKey(key);\n    this.element.setAttribute(key, value);\n    return this.get(key);\n  };\n\n  DataMap.prototype.has = function (key) {\n    key = this.getFormattedKey(key);\n    return this.element.hasAttribute(key);\n  };\n\n  DataMap.prototype.delete = function (key) {\n    if (this.has(key)) {\n      key = this.getFormattedKey(key);\n      this.element.removeAttribute(key);\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  DataMap.prototype.getFormattedKey = function (key) {\n    return \"data-\" + this.identifier + \"-\" + dasherize(key);\n  };\n\n  return DataMap;\n}();\n\nexport { DataMap };\n\nfunction dasherize(value) {\n  return value.replace(/([A-Z])/g, function (_, char) {\n    return \"-\" + char.toLowerCase();\n  });\n}","map":null,"metadata":{},"sourceType":"module"}