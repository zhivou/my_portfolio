{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction getTouchEvent(e) {\n  return e.touches && e.touches[0] || e;\n}\n\nvar Swipe = function () {\n  function Swipe(pager) {\n    var _this = this;\n\n    _classCallCheck(this, Swipe);\n\n    this._onSwipeStart = function (e) {\n      var _getTouchEvent = getTouchEvent(e),\n          pageX = _getTouchEvent.pageX,\n          pageY = _getTouchEvent.pageY; // we're now swiping\n\n\n      _this.pager.isSwiping = true; // store the initial starting coordinates\n\n      _this._swipeStart = {\n        x: pageX,\n        y: pageY // reset swipeDiff\n\n      };\n      _this._swipeDiff = {\n        x: 0,\n        y: 0 // determine if a flick or not\n\n      };\n      _this._isFlick = true;\n      setTimeout(function () {\n        _this._isFlick = false;\n      }, _this.pager.options.flickTimeout);\n\n      _this.pager.emit('swipeStart');\n    };\n\n    this._onSwipeMove = function (e) {\n      // bail if we aren't swiping\n      if (!_this.pager.isSwiping) return;\n      var _pager$options = _this.pager.options,\n          swipeThreshold = _pager$options.swipeThreshold,\n          axis = _pager$options.axis;\n\n      var _getTouchEvent2 = getTouchEvent(e),\n          pageX = _getTouchEvent2.pageX,\n          pageY = _getTouchEvent2.pageY; // grab the current position of the track before\n\n\n      if (!_this._trackStart) {\n        _this._trackStart = _this.pager.currentTween;\n      } // determine how much we have moved\n\n\n      _this._swipeDiff = {\n        x: _this._swipeStart.x - pageX,\n        y: _this._swipeStart.y - pageY\n      };\n\n      if (_this._isSwipe(swipeThreshold)) {\n        e.preventDefault();\n        e.stopPropagation();\n        var swipeDiff = _this._swipeDiff[axis];\n        var trackPosition = _this._trackStart - swipeDiff;\n\n        _this.pager.setPositionValue(trackPosition);\n\n        _this.pager.emit('swipeMove');\n      }\n    };\n\n    this._onSwipeEnd = function () {\n      var _pager$options2 = _this.pager.options,\n          swipeThreshold = _pager$options2.swipeThreshold,\n          viewsToMove = _pager$options2.viewsToMove,\n          axis = _pager$options2.axis,\n          infinite = _pager$options2.infinite;\n      var threshold = _this._isFlick ? swipeThreshold : _this.pager.currentView.getSize() * viewsToMove * swipeThreshold; // we've stopped swiping\n\n      _this.pager.isSwiping = false; // reset start track so we can grab it again on the next swipe\n\n      _this._trackStart = false; // don't move anything if there hasn't been an attempted swipe\n\n      if (_this._swipeDiff.x || _this._swipeDiff.y) {\n        // determine if we've passed the defined threshold\n        if (_this._isSwipe(threshold)) {\n          if (_this._swipeDiff[axis] < 0) {\n            _this.pager.prev();\n          } else {\n            _this.pager.next();\n          }\n        } // if we didn't, reset back to original view\n        else {\n          _this.pager.setPositionValue();\n        }\n      }\n\n      _this.pager.emit('swipeEnd');\n    };\n\n    this._onSwipePast = function () {\n      // perform a swipe end if we swiped past the component\n      if (_this.pager.isSwiping) {\n        _this._onSwipeEnd();\n      }\n    };\n\n    this.pager = pager;\n    this._trackStart = false;\n    this._swipeStart = this._swipeDiff = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  _createClass(Swipe, [{\n    key: '_isSwipe',\n    value: function _isSwipe(threshold) {\n      var _swipeDiff = this._swipeDiff,\n          x = _swipeDiff.x,\n          y = _swipeDiff.y;\n      return this.pager.options.axis === 'x' ? Math.abs(x) > Math.max(threshold, Math.abs(y)) : Math.abs(x) < Math.max(threshold, Math.abs(y));\n    }\n  }, {\n    key: 'getEvents',\n    value: function getEvents() {\n      var swipe = this.pager.options.swipe;\n      var swipeEvents = {};\n\n      if (swipe === true || swipe === 'mouse') {\n        swipeEvents.onMouseDown = this._onSwipeStart;\n        swipeEvents.onMouseMove = this._onSwipeMove;\n        swipeEvents.onMouseUp = this._onSwipeEnd;\n        swipeEvents.onMouseLeave = this._onSwipePast;\n      }\n\n      if (swipe === true || swipe === 'touch') {\n        swipeEvents.onTouchStart = this._onSwipeStart;\n        swipeEvents.onTouchMove = this._onSwipeMove;\n        swipeEvents.onTouchEnd = this._onSwipeEnd;\n      }\n\n      return swipeEvents;\n    }\n  }]);\n\n  return Swipe;\n}();\n\nexports.default = Swipe;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"module"}