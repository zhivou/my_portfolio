{"ast":null,"code":"import { Action } from \"./action\";\nimport { Binding } from \"./binding\";\nimport { ValueListObserver } from \"@stimulus/mutation-observers\";\n\nvar BindingObserver =\n/** @class */\nfunction () {\n  function BindingObserver(context, delegate) {\n    this.context = context;\n    this.delegate = delegate;\n    this.bindingsByAction = new Map();\n  }\n\n  BindingObserver.prototype.start = function () {\n    if (!this.valueListObserver) {\n      this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);\n      this.valueListObserver.start();\n    }\n  };\n\n  BindingObserver.prototype.stop = function () {\n    if (this.valueListObserver) {\n      this.valueListObserver.stop();\n      delete this.valueListObserver;\n      this.disconnectAllActions();\n    }\n  };\n\n  Object.defineProperty(BindingObserver.prototype, \"element\", {\n    get: function get() {\n      return this.context.element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BindingObserver.prototype, \"identifier\", {\n    get: function get() {\n      return this.context.identifier;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BindingObserver.prototype, \"actionAttribute\", {\n    get: function get() {\n      return this.schema.actionAttribute;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BindingObserver.prototype, \"schema\", {\n    get: function get() {\n      return this.context.schema;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BindingObserver.prototype, \"bindings\", {\n    get: function get() {\n      return Array.from(this.bindingsByAction.values());\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BindingObserver.prototype.connectAction = function (action) {\n    var binding = new Binding(this.context, action);\n    this.bindingsByAction.set(action, binding);\n    this.delegate.bindingConnected(binding);\n  };\n\n  BindingObserver.prototype.disconnectAction = function (action) {\n    var binding = this.bindingsByAction.get(action);\n\n    if (binding) {\n      this.bindingsByAction.delete(action);\n      this.delegate.bindingDisconnected(binding);\n    }\n  };\n\n  BindingObserver.prototype.disconnectAllActions = function () {\n    var _this = this;\n\n    this.bindings.forEach(function (binding) {\n      return _this.delegate.bindingDisconnected(binding);\n    });\n    this.bindingsByAction.clear();\n  }; // Value observer delegate\n\n\n  BindingObserver.prototype.parseValueForToken = function (token) {\n    var action = Action.forToken(token);\n\n    if (action.identifier == this.identifier) {\n      return action;\n    }\n  };\n\n  BindingObserver.prototype.elementMatchedValue = function (element, action) {\n    this.connectAction(action);\n  };\n\n  BindingObserver.prototype.elementUnmatchedValue = function (element, action) {\n    this.disconnectAction(action);\n  };\n\n  return BindingObserver;\n}();\n\nexport { BindingObserver };","map":null,"metadata":{},"sourceType":"module"}