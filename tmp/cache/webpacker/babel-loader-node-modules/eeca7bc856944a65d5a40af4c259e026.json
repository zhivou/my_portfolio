{"ast":null,"code":"import { add, del } from \"./set_operations\";\n\nvar Multimap =\n/** @class */\nfunction () {\n  function Multimap() {\n    this.valuesByKey = new Map();\n  }\n\n  Object.defineProperty(Multimap.prototype, \"values\", {\n    get: function get() {\n      var sets = Array.from(this.valuesByKey.values());\n      return sets.reduce(function (values, set) {\n        return values.concat(Array.from(set));\n      }, []);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Multimap.prototype, \"size\", {\n    get: function get() {\n      var sets = Array.from(this.valuesByKey.values());\n      return sets.reduce(function (size, set) {\n        return size + set.size;\n      }, 0);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Multimap.prototype.add = function (key, value) {\n    add(this.valuesByKey, key, value);\n  };\n\n  Multimap.prototype.delete = function (key, value) {\n    del(this.valuesByKey, key, value);\n  };\n\n  Multimap.prototype.has = function (key, value) {\n    var values = this.valuesByKey.get(key);\n    return values != null && values.has(value);\n  };\n\n  Multimap.prototype.hasKey = function (key) {\n    return this.valuesByKey.has(key);\n  };\n\n  Multimap.prototype.hasValue = function (value) {\n    var sets = Array.from(this.valuesByKey.values());\n    return sets.some(function (set) {\n      return set.has(value);\n    });\n  };\n\n  Multimap.prototype.getValuesForKey = function (key) {\n    var values = this.valuesByKey.get(key);\n    return values ? Array.from(values) : [];\n  };\n\n  Multimap.prototype.getKeysForValue = function (value) {\n    return Array.from(this.valuesByKey).filter(function (_a) {\n      var key = _a[0],\n          values = _a[1];\n      return values.has(value);\n    }).map(function (_a) {\n      var key = _a[0],\n          values = _a[1];\n      return key;\n    });\n  };\n\n  return Multimap;\n}();\n\nexport { Multimap };","map":null,"metadata":{},"sourceType":"module"}