{"ast":null,"code":"import * as React from 'react';\nimport { hideOthers } from 'aria-hidden';\nimport { InteractivityDisabler } from './InteractivityDisabler';\nimport { focusHiddenMarker } from './medium';\nimport { useEffect, useRef, useState } from 'react';\n\nvar extractRef = function extractRef(ref) {\n  return 'current' in ref ? ref.current : ref;\n};\n\nexport function Effect(_a) {\n  var setLockProps = _a.setLockProps,\n      onEscapeKey = _a.onEscapeKey,\n      onClickOutside = _a.onClickOutside,\n      shards = _a.shards,\n      onActivation = _a.onActivation,\n      onDeactivation = _a.onDeactivation,\n      noIsolation = _a.noIsolation;\n\n  var _b = useState(undefined),\n      activeNode = _b[0],\n      setActiveNode = _b[1];\n\n  var lastEventTarget = useRef(null);\n  var mouseTouches = useRef(0);\n  React.useEffect(function () {\n    var onKeyDown = function onKeyDown(event) {\n      if (!event.defaultPrevented) {\n        if ((event.code === 'Escape' || event.key === 'Escape' || event.keyCode === 27) && onEscapeKey) {\n          onEscapeKey(event);\n        }\n      }\n    };\n\n    var onMouseDown = function onMouseDown(event) {\n      if (event.defaultPrevented || event.target === lastEventTarget.current || event instanceof MouseEvent && event.button !== 0) {\n        return;\n      }\n\n      if (shards && shards.map(extractRef).some(function (node) {\n        return node && node.contains(event.target) || node === event.target;\n      })) {\n        return;\n      }\n\n      if (onClickOutside) {\n        onClickOutside(event);\n      }\n    };\n\n    var onTouchStart = function onTouchStart(event) {\n      onMouseDown(event);\n      mouseTouches.current = event.touches.length;\n    };\n\n    var onTouchEnd = function onTouchEnd(event) {\n      mouseTouches.current = event.touches.length;\n    };\n\n    if (activeNode) {\n      document.addEventListener('keydown', onKeyDown);\n      document.addEventListener('mousedown', onMouseDown);\n      document.addEventListener('touchstart', onTouchStart);\n      document.addEventListener('touchend', onTouchEnd);\n      return function () {\n        document.removeEventListener('keydown', onKeyDown);\n        document.removeEventListener('mousedown', onMouseDown);\n        document.removeEventListener('touchstart', onTouchStart);\n        document.removeEventListener('touchend', onTouchEnd);\n      };\n    }\n  }, [activeNode, onClickOutside, onEscapeKey]);\n  useEffect(function () {\n    if (activeNode) {\n      if (onActivation) {\n        onActivation(activeNode);\n      }\n\n      return function () {\n        if (onDeactivation) {\n          onDeactivation();\n        }\n      };\n    }\n  }, [!!activeNode]);\n  useEffect(function () {\n    var _undo = function _undo() {\n      return null;\n    };\n\n    var unmounted = false;\n\n    var onNodeActivation = function onNodeActivation(node) {\n      _undo = hideOthers([node].concat((shards || []).map(extractRef)), document.body, noIsolation ? undefined : focusHiddenMarker);\n      setActiveNode(function () {\n        return node;\n      });\n    };\n\n    var onNodeDeactivation = function onNodeDeactivation() {\n      _undo();\n\n      if (!unmounted) {\n        setActiveNode(null);\n      }\n    };\n\n    setLockProps({\n      onMouseDown: function onMouseDown(e) {\n        lastEventTarget.current = e.target;\n      },\n      onTouchStart: function onTouchStart(e) {\n        lastEventTarget.current = e.target;\n      },\n      onActivation: onNodeActivation,\n      onDeactivation: onNodeDeactivation\n    });\n    return function () {\n      unmounted = true;\n      setLockProps(false);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(InteractivityDisabler, null);\n}","map":null,"metadata":{},"sourceType":"module"}