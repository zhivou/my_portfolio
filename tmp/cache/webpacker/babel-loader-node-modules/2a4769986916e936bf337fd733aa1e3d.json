{"ast":null,"code":"import { TokenListObserver } from \"./token_list_observer\";\n\nvar ValueListObserver =\n/** @class */\nfunction () {\n  function ValueListObserver(element, attributeName, delegate) {\n    this.tokenListObserver = new TokenListObserver(element, attributeName, this);\n    this.delegate = delegate;\n    this.parseResultsByToken = new WeakMap();\n    this.valuesByTokenByElement = new WeakMap();\n  }\n\n  Object.defineProperty(ValueListObserver.prototype, \"started\", {\n    get: function get() {\n      return this.tokenListObserver.started;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ValueListObserver.prototype.start = function () {\n    this.tokenListObserver.start();\n  };\n\n  ValueListObserver.prototype.stop = function () {\n    this.tokenListObserver.stop();\n  };\n\n  ValueListObserver.prototype.refresh = function () {\n    this.tokenListObserver.refresh();\n  };\n\n  Object.defineProperty(ValueListObserver.prototype, \"element\", {\n    get: function get() {\n      return this.tokenListObserver.element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueListObserver.prototype, \"attributeName\", {\n    get: function get() {\n      return this.tokenListObserver.attributeName;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ValueListObserver.prototype.tokenMatched = function (token) {\n    var element = token.element;\n    var value = this.fetchParseResultForToken(token).value;\n\n    if (value) {\n      this.fetchValuesByTokenForElement(element).set(token, value);\n      this.delegate.elementMatchedValue(element, value);\n    }\n  };\n\n  ValueListObserver.prototype.tokenUnmatched = function (token) {\n    var element = token.element;\n    var value = this.fetchParseResultForToken(token).value;\n\n    if (value) {\n      this.fetchValuesByTokenForElement(element).delete(token);\n      this.delegate.elementUnmatchedValue(element, value);\n    }\n  };\n\n  ValueListObserver.prototype.fetchParseResultForToken = function (token) {\n    var parseResult = this.parseResultsByToken.get(token);\n\n    if (!parseResult) {\n      parseResult = this.parseToken(token);\n      this.parseResultsByToken.set(token, parseResult);\n    }\n\n    return parseResult;\n  };\n\n  ValueListObserver.prototype.fetchValuesByTokenForElement = function (element) {\n    var valuesByToken = this.valuesByTokenByElement.get(element);\n\n    if (!valuesByToken) {\n      valuesByToken = new Map();\n      this.valuesByTokenByElement.set(element, valuesByToken);\n    }\n\n    return valuesByToken;\n  };\n\n  ValueListObserver.prototype.parseToken = function (token) {\n    try {\n      var value = this.delegate.parseValueForToken(token);\n      return {\n        value: value\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  };\n\n  return ValueListObserver;\n}();\n\nexport { ValueListObserver };","map":null,"metadata":{},"sourceType":"module"}